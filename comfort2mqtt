#!/usr/bin/perl

use strict;
use warnings;

use FindBin qw ($Bin);
use lib $Bin;

use Proc::Daemon;
use POSIX;
use Time::HiRes qw ( gettimeofday );
use Comfort::Serial;
use Net::MQTT::Simple;

use constant COMFORT_DEVICE => '/dev/ttyUSB0';
use constant COMFORT_PASSWORD => '0000';
use constant COMFORT_RECEIVE_TIMEOUT => 100;
use constant MQTT_HOST => 'localhost';
use constant MQTT_USER => undef;
use constant MQTT_PASSWORD => undef;
use constant MQTT_COMFORT_PUBLISH_TOPIC => "comfort/status";
use constant MQTT_COMFORT_SUBSCRIBE_SET => "comfort/set";
use constant MQTT_COMFORT_SUBSCRIBE_GET => "comfort/get";
use constant MQTT_CBUS_PUBLISH_TOPIC => "cbus/status";
use constant MQTT_CBUS_SUBSCRIBE_SET => "cbus/set";
use constant MQTT_CBUS_SUBSCRIBE_GET => "cbus/get";
use constant MQTT_TICK_TIMEOUT => 100;
use constant ALLOWED_TIME_DEVIATION => 2;

# AM/AR alarm parameter types
use constant ALARM_NONE => 0;
use constant ALARM_ZONE => 1;
use constant ALARM_USER => 2;
use constant ALARM_ID   => 3;

# State topics for communicating with Home Assistant MQTT alarm
use constant HASS_STATE_TOPIC     => 'hass_state';
use constant HASS_STATE_DISARMED  => 'disarmed';
use constant HASS_STATE_AWAY      => 'armed_away';
use constant HASS_STATE_HOME      => 'armed_home';
use constant HASS_STATE_NIGHT     => 'armed_night';
use constant HASS_STATE_PENDING   => 'pending';
use constant HASS_STATE_TRIGGERED => 'triggered';

use constant COMFORT2MQTT_STATUS_TOPIC   => 'comfort2mqtt/status';
use constant COMFORT2MQTT_STATUS_ONLINE  => 'online';
use constant COMFORT2MQTT_STATUS_OFFLINE => 'offline';


$0 = 'comfort2mqtt';

our $daemon = 0;

# Determines if unknown MQTT 'comfort/set' messages are passed
# on to comfort.  Useful for trying new stuff, but should not
# be enabled in production, as it allows arbitrary comfort
# command execution.
our $rawMsgsAllowed  = $ENV{COMFORT2MQTT_RAW_MSGS_ALLOWED} // 0;

our $comfortDevice   = $ENV{COMFORT2MQTT_DEVICE}           //= COMFORT_DEVICE;
our $comfortPassword = $ENV{COMFORT2MQTT_COMFORT_PASSWORD} //= COMFORT_PASSWORD;
our $mqttHost        = $ENV{COMFORT2MQTT_MQTT_HOST}        //= MQTT_HOST;
our $mqttUser        = $ENV{COMFORT2MQTT_MQTT_USER}        //= MQTT_USER;
our $mqttPassword    = $ENV{COMFORT2MQTT_MQTT_PASSWORD}    //= MQTT_PASSWORD;
our $logFileName;

our %RETAIN_INPUT = map { $_ => 1 } split (/\s/m, $ENV{COMFORT2MQTT_RETAINED_INPUTS} //= '');

our %RETAIN_OUTPUT =
(
);



while (my $arg = shift @ARGV)
{
	if ($arg eq '-d')
	{
		$daemon = 1;
	}
	elsif ($arg eq '-allow-raw-msgs')
	{
		$rawMsgsAllowed = 1;
	}
	elsif ($arg eq '-port')
	{
		$comfortDevice = shift @ARGV;
	}
	elsif ($arg eq '-log')
	{
		$logFileName = shift @ARGV;
	}
	elsif ($arg eq '-m')
	{
		$mqttHost = shift @ARGV;
	}
	elsif ($arg eq '-user')
	{
		$mqttUser = shift @ARGV;
	}
	elsif ($arg eq '-password')
	{
		$mqttPassword = shift @ARGV;
	}
}


# The values of all retained topics sent out.
our %RETAINED = ();
our $comfort = Comfort::Serial->new ($comfortDevice);
our %RAMP_LOOKUP =
(
	0  => $comfort->CBUS_RAMP_0,
	4  => $comfort->CBUS_RAMP_4,
	8  => $comfort->CBUS_RAMP_8,
	12 => $comfort->CBUS_RAMP_12,
	20 => $comfort->CBUS_RAMP_20,
	30 => $comfort->CBUS_RAMP_30,
	40 => $comfort->CBUS_RAMP_40,
	60 => $comfort->CBUS_RAMP_60,
);

our %INPUT_STATUS =
(
	$comfort->COMFORT_INPUT_OFF           => 'OFF',
	$comfort->COMFORT_INPUT_ON            => 'ON',
	$comfort->COMFORT_INPUT_SHORT_CIRCUIT => 'TROUBLE',
	$comfort->COMFORT_INPUT_OPEN_CIRCUIT  => 'TROUBLE',
);

our %OUTPUT_STATUS =
(
	'OFF' => $comfort->COMFORT_OUTPUT_OFF,
	'ON' => $comfort->COMFORT_OUTPUT_ON,
	'TOGGLE' => $comfort->COMFORT_OUTPUT_TOGGLE,
	'PULSE' => $comfort->COMFORT_OUTPUT_PULSE,
	'FLASH' => $comfort->COMFORT_OUTPUT_FLASH,
);

our %ARM_STATUS =
(
	'OFF'      => $comfort->COMFORT_ARM_OFF,
	'NIGHT'    => $comfort->COMFORT_ARM_NIGHT,
	'DAY'      => $comfort->COMFORT_ARM_DAY,
	'AWAY'     => $comfort->COMFORT_ARM_AWAY,
	'VACATION' => $comfort->COMFORT_ARM_VACATION,
);

our %ALARM_STATE =
(
	$comfort->COMFORT_STATE_IDLE    => 'IDLE',
	$comfort->COMFORT_STATE_TROUBLE => 'TROUBLE',
	$comfort->COMFORT_STATE_ALERT   => 'ALERT',
	$comfort->COMFORT_STATE_ALARM   => 'ALARM',
);

our %HASS_ARM_STATE =
(
	$comfort->COMFORT_ARM_OFF       => HASS_STATE_DISARMED,
#	$comfort->COMFORT_ARM_NIGHT     => HASS_STATE_NIGHT,
#	$comfort->COMFORT_ARM_DAY       => HASS_STATE_HOME,
	$comfort->COMFORT_ARM_NIGHT     => HASS_STATE_HOME,
	$comfort->COMFORT_ARM_AWAY      => HASS_STATE_AWAY,
	$comfort->COMFORT_ARM_VACATION  => HASS_STATE_AWAY,
);

our %ENTRY_EXIT =
(
	$comfort->COMFORT_ENTRY_ALERT => 'entry',
	$comfort->COMFORT_EXIT_DELAY  => 'exit',
);

our %REPORT_TOPIC =
(
	'a?'   => 'alarm_info',
	'AL'   => 'alarm_type',
	'A?'   => 'analog_input',
	'AC'   => 'alarm_code',
	'AM'   => 'alarm',
	'AR'   => 'alarm_restored',
	'BP'   => 'beep',
	'BY'   => 'bypass',
	'B?'   => 'bypass_all',
	'CS'   => 'rs485_status',
	'CT'   => 'counter',
	'C?'   => 'counter',
	'DB'   => 'doorbell',
	'DT'   => 'date',
	'ER'   => 'open_zones',
	'EV'   => 'event',
	'EX'   => 'exit_entry_delay',
	'FL'   => 'flag',
	'F?'   => 'flag',
	'IP'   => 'input',
	'IR'   => 'infrared',
	'IX'   => 'irfrared_code',
	'KL'   => 'led',
	'K?'   => 'led',
	'LB'   => 'low_battery',
	'LR'   => 'login',
	'MD'   => 'arm',
	'M?'   => 'arm',
	'OP'   => 'output',
	'O?'   => 'output',
	'PT'   => 'pulse',
	'PS'   => 'engineer_code',
);


our %ALARM_TYPE =
(
	$comfort->COMFORT_ALARM_INTRUDER            => [ 'intruder',            1, ALARM_ZONE ],
	$comfort->COMFORT_ALARM_ZONE_TROUBLE        => [ 'zone_trouble',        1, ALARM_ZONE ],
	$comfort->COMFORT_ALARM_LOW_BATTERY         => [ 'low_battery',         0, ALARM_NONE ],
	$comfort->COMFORT_ALARM_POWER_FAIL          => [ 'power_fail',          0, ALARM_ID   ],
	$comfort->COMFORT_ALARM_PHONE_TROUBLE       => [ 'phone_trouble',       0, ALARM_NONE ],
	$comfort->COMFORT_ALARM_DURESS              => [ 'duress',              1, ALARM_USER ],
	$comfort->COMFORT_ALARM_ARM_FAIL            => [ 'arm_fail',            0, ALARM_USER ],
	$comfort->COMFORT_ALARM_SYSTEM_DISARMED     => [ 'system_disarmed',     0, ALARM_USER ],
	$comfort->COMFORT_ALARM_SYSTEM_ARMED        => [ 'system_armed',        0, ALARM_USER ],
	$comfort->COMFORT_ALARM_TAMPER              => [ 'tamper',              1, ALARM_ID   ],
	$comfort->COMFORT_ALARM_ENTRY_WARNING       => [ 'entry_warning',       0, ALARM_ZONE ],
	$comfort->COMFORT_ALARM_ALARM_ABORT         => [ 'alarm_abort',         0, ALARM_NONE ],
	$comfort->COMFORT_ALARM_SIREN_TAMPER        => [ 'siren_tamper',        1, ALARM_ID   ],
	$comfort->COMFORT_ALARM_BYPASS              => [ 'bypass',              0, ALARM_ZONE ],
	$comfort->COMFORT_ALARM_DIAL_TEST           => [ 'dial_test',           0, ALARM_USER ],
	$comfort->COMFORT_ALARM_ENTRY_ALERT         => [ 'entry_alert',         0, ALARM_ZONE ],
	$comfort->COMFORT_ALARM_FIRE                => [ 'fire',                1, ALARM_NONE ],
	$comfort->COMFORT_ALARM_PANIC               => [ 'panic',               1, ALARM_NONE ],
	$comfort->COMFORT_ALARM_GSM_TROUBLE         => [ 'gsm_trouble',         0, ALARM_ID   ],
	$comfort->COMFORT_ALARM_NEW_MESSAGE         => [ 'new_message',         0, ALARM_USER ],
	$comfort->COMFORT_ALARM_DOORBELL            => [ 'doorbell',            0, ALARM_ID   ],
	$comfort->COMFORT_ALARM_COMMUNICATIONS_FAIL => [ 'communications_fail', 0, ALARM_ID   ],
	$comfort->COMFORT_ALARM_SIGNIN_TAMPER       => [ 'signin_tamper',       0, ALARM_ID   ],
	$comfort->COMFORT_ALARM_ZONE_ALERT          => [ 'zone_alert',          0, ALARM_ZONE ],
	$comfort->COMFORT_ALARM_GAS                 => [ 'gas',                 0, ALARM_NONE ],
	$comfort->COMFORT_ALARM_FAMILY_CARE         => [ 'family_care',         0, ALARM_NONE ],
	$comfort->COMFORT_ALARM_PERIMETER_ALERT     => [ 'perimeter_alert',     0, ALARM_ZONE ],
	$comfort->COMFORT_ALARM_CMS_TEST            => [ 'cms_test',            0, ALARM_NONE ],
	$comfort->COMFORT_ALARM_HOMESAFE            => [ 'homesafe',            0, ALARM_NONE ],
	$comfort->COMFORT_ALARM_ENGINEER_SIGNIN     => [ 'engineer',            0, ALARM_NONE ],
	$comfort->COMFORT_ALARM_UNUSED              => [ 'unused',              0, ALARM_NONE ],
);

$comfort->SetLogger (\&ComfortLogger);
if ($daemon)
{
	Proc::Daemon::Init ({
		work_dir => $Bin,
		child_STDOUT => ($logFileName ? ">>$logFileName" : '/dev/null'),
		child_STDERR => ($logFileName ? ">>$logFileName" : '/dev/null')
		});
}
elsif ($logFileName)
{
	open (STDOUT, '>>', $logFileName) or die "Could not open $logFileName: @!";
}

$| = 1;


our $mqtt = Net::MQTT::Simple->new ($mqttHost);
if ($mqttUser)
{
	# Hack for now to allow logic() to work.
	# Need to implement SSL to be able to remove this
	$ENV{MQTT_SIMPLE_ALLOW_INSECURE_LOGIN} = 1;
	$mqtt->login ($mqttUser, $mqttPassword);
}

$mqtt->last_will (COMFORT2MQTT_STATUS_TOPIC, COMFORT2MQTT_STATUS_OFFLINE, 1);
$mqtt->subscribe (MQTT_COMFORT_SUBSCRIBE_SET . '/#', \&MqttComfortCallback);
$mqtt->subscribe (MQTT_COMFORT_SUBSCRIBE_GET . '/#', \&MqttComfortCallback);
$mqtt->subscribe (MQTT_CBUS_SUBSCRIBE_SET . '/#', \&MqttCbusCallback);
$mqtt->subscribe (MQTT_CBUS_SUBSCRIBE_GET . '/#', \&MqttCbusCallback);

our $connected = 0;
our $reportsEnabled = 0;
our $loggedIn = 0;
our $adjustDateTime = 0;
our $mqttConnected = 0;
our $onlineSent = 0;
our $alarmStateRequested = 0;

sub Print (@)
{
	my ($secs, $usecs) = gettimeofday();
	print POSIX::strftime("%Y/%m/%d %H:%M:%S", localtime ($secs)), '.', sprintf ('%03d', int ($usecs/1000)), ' ', @_, "\n";
}

our $terminated = 0;
$SIG{INT} = $SIG{QUIT} = $SIG{TERM} = sub
{
	Print "Termination signal received...";
	$terminated = 1;
};

Print "===================================================================";
Print "Configuration...";
Print "  Device          : $comfortDevice";
Print "  Comfort password: ", $comfortPassword ? 'Yes' : 'No';
Print "  MQTT Host       : $mqttHost";
Print "  MQTT User       : ", (!defined $mqttUser ? 'Not defined' : $mqttUser);
Print "  MQTT Password   : ", (!defined $mqttPassword ? 'Not defined' : $mqttPassword ? 'Yes' : 'No');
Print "  Raw msgs        : $rawMsgsAllowed";
Print "  Retained inputs : ", join (' ', keys %RETAIN_INPUT);
Print "-------------------------------------------------------------------";
Print "Starting up ....";

# Tell everyone we're offline, first
&SendMqttMsg ([], COMFORT2MQTT_STATUS_TOPIC, COMFORT2MQTT_STATUS_OFFLINE, 1);

while (! $terminated)
{
	if (! $connected)
	{
		$loggedIn = 0;

		Print ("Connecting to Comfort system ...");
		if (! $comfort->Connect())
		{
			Print "Could not connect.  Retrying ...";
			sleep (1);
			next;
		}


		Print ("Connected.");
		$connected = 1;
	}

	if (! $loggedIn)
	{
		Print "Logging in to Comfort system ...";
		if (! $comfort->Login ($comfortPassword))
		{
			Print "Could not login.  Retrying ...";
			sleep (1);
			next;
		}

		Print ("Logged in.");
		$loggedIn = 1;
	}

	$mqttConnected = &IsMqttConnected();
	if ($mqttConnected == 0)
	{
		$onlineSent = 0;
	}

	if ($loggedIn && ! $onlineSent)
	{
		Print "Publishing 'online' status ...";
		while (! $terminated && ! $onlineSent)
		{
			# Tell everyone we're ready
			&SendMqttMsg ([], COMFORT2MQTT_STATUS_TOPIC, COMFORT2MQTT_STATUS_ONLINE, 1);

			$mqttConnected = &IsMqttConnected();
			if (! $mqttConnected)
			{
				sleep 1;
				next;
			}

			Print "Published 'online' status.";
			$onlineSent = 1;

			# Rerequest the alarm state
			$alarmStateRequested = 0;
		}
	}

	if (! $reportsEnabled && $mqttConnected)
	{
		Print "Enabling reports ...";
		if (! $comfort->EnableReports (\&ComfortResultHandler))
		{
			Print "Could not enable reports.  Reconnecting ...";
			$comfort->Disconnect();
			$connected = 0;
			next;
		}

		Print ("Reports enabled.");
		$reportsEnabled = 1;

		# Start with all zone alarm types cleared
		&ClearAlarmTypes();

		$comfort->SetMsgCallback ('a?', \&ComfortAlarmInformationHandler);
		$comfort->SetMsgCallback ('AL', \&ComfortALHandler);
		$comfort->SetMsgCallback ('CT', \&ComfortCTHandler);
		$comfort->SetMsgCallback ('C?', \&ComfortCTHandler);
		$comfort->SetMsgCallback ('DT', \&ComfortDTHandler);
		$comfort->SetMsgCallback ('IP', \&ComfortIPHandler);
		$comfort->SetMsgCallback ('OP', \&ComfortOPHandler);
		$comfort->SetMsgCallback ('O?', \&ComfortOPHandler);
		$comfort->SetMsgCallback ('MD', \&ComfortMDHandler);
		$comfort->SetMsgCallback ('M?', \&ComfortMDHandler);
		$comfort->SetMsgCallback ('AM', \&ComfortAMARHandler);
		$comfort->SetMsgCallback ('AR', \&ComfortAMARHandler);
		$comfort->SetMsgCallback ('EX', \&ComfortEXHandler);
		$comfort->SetMsgCallback ('PS', \&ComfortPSHandler);
	}

	if (! $alarmStateRequested && $reportsEnabled && $mqttConnected)
	{
		Print ("Requesting alarm state ...");
		foreach my $output (keys %RETAIN_OUTPUT)
		{
			$comfort->RequestOutputValue ($output);
		}

		$comfort->RequestAlarmInformationReport();
		$comfort->RequestSecurityModeReport();
		$comfort->RequestInputReports();

		$alarmStateRequested = 1;
	}

	if ($adjustDateTime)
	{
		my $tm = time;

		# Adjust the time once an hour, 06:37 seconds past the hour
		if ($tm % 3600 == 6*60 + 37)
		{
			if ($comfort->SetDateTime ($tm))
			{
				Print ("Set Date/Time to ", scalar localtime ($tm));
				$adjustDateTime = 0;
			}
			else
			{
				Print ("Failed to set Date/Time: ", $comfort->GetLastErrorMsg());
			}
		}
	}

	my ($msg, $type) = $comfort->Receive (COMFORT_RECEIVE_TIMEOUT);
	if ($msg && $msg ne 'OK')
	{
		Print "Got: [$type, $msg]";
		if ($msg ne 'NA')
		{
			&ComfortResultHandler ($comfort, $type, $msg);
		}
	}

	# Check if we're still logged in
	if ($loggedIn && ! $comfort->LoggedIn())
	{
		Print ("Logged out, re-logging in...");

		# Log in again, enabling reports and getting the alarm state
		$loggedIn = $reportsEnabled = $alarmStateRequested = 0;
	}

	if (! $terminated)
	{
		$mqtt->tick (MQTT_TICK_TIMEOUT/1000.0);
	}
}

Print "Terminating ...";

$comfort->Logout();
$comfort->Disconnect();

Print "Terminated.";

exit 0;


sub GetUserName ($)
{
	my ($user) = @_;
	return
		$user == $comfort->COMFORT_USER_KEYPAD ? 'keypad' :
		$user == $comfort->COMFORT_USER_NONE   ? 'nouser' : $user;
}


sub ArmToMode ($$)
{
	my ($comfort, $mode) = @_;

	my $key =
		$mode == $comfort->COMFORT_ARM_NIGHT    ? $comfort->COMFORT_KEY_NIGHT :
		$mode == $comfort->COMFORT_ARM_DAY      ? $comfort->COMFORT_KEY_DAY :
		$mode == $comfort->COMFORT_ARM_AWAY     ? $comfort->COMFORT_KEY_AWAY :
		$mode == $comfort->COMFORT_ARM_OFF      ? '' : undef;

	# Use the keypad to arm, except for vacation and away modes,
	# in which case, remote arm the system.
	my $remote = ($mode == $comfort->COMFORT_ARM_AWAY || $mode == $comfort->COMFORT_ARM_VACATION);
	if ($key && !$remote)
	{
		return $comfort->SendKey ($key);
	}
	else
	{
		return $comfort->SetArmMode ($mode, $comfortPassword, $remote);
	}
}



sub MqttComfortCallback
{
	my ($topic, $msg) = @_;

	my $result = '';
	my ($t1, $op, @params) = split (/\//, $topic);
	my $cmd = (@params ? pop @params : 'none');
	my $n = scalar (@params);

	Print "Received MQTT COMFORT msg: $topic = $msg ($op/$cmd (@params))";
	if ($op eq 'set')
	{
		if ($cmd eq 'login' && $n == 0)
		{
			$comfort->Logout();
			if (! ($result = $comfort->Login ($msg)))
			{
				$loggedIn = 0;
			}
		}
		elsif ($cmd eq 'logout' && $n == 0)
		{
			$result = $comfort->Logout();
			$loggedIn = 0;
		}
		elsif ($cmd eq 'key' && $n == 0)
		{
			$result = $comfort->SendKey ($msg);
		}
		elsif ($cmd eq 'output' && $n == 1)
		{
			my ( $output ) = @params;
			Print "Received output request for $output = $msg";
			if (exists ($OUTPUT_STATUS{uc ($msg)}))
			{
				$result = $comfort->SetOutput ($output, $OUTPUT_STATUS{uc ($msg)});
			}
			else
			{
				Print ("Unknown output msg: $msg");
			}
		}
		elsif ($cmd eq 'bypass' && $n == 1)
		{
			my ( $zone ) = @params;
			if ($msg eq 'ON' || $msg eq 'OFF')
			{
				$result = $comfort->BypassZone ($zone, $msg eq 'ON' ? 1 : 0);
			}
			else
			{
				Print ("ERROR: Unknown bypass msg: $msg");
			}
		}
		elsif ($cmd eq 'arm' && $n == 0)
		{
			my $mode = $ARM_STATUS{uc ($msg)};
			$result = ArmToMode ($comfort, $mode);
		}
		elsif ($cmd eq HASS_STATE_TOPIC && $n == 0)
		{
			my $state = lc ($msg);
			my $mode = (grep { $HASS_ARM_STATE{$_} eq $state } keys %HASS_ARM_STATE)[0];

			$result = ArmToMode ($comfort, $mode);
		}
		elsif ($rawMsgsAllowed)
		{
			Print ("WARNING: Sending Unknown 'set' msg directly to comfort: $msg");
			$result = $comfort->Send ($msg);
		}
		else
		{
			Print ("ERROR: Unknown 'set' msg, ignoring: $msg");
		}
	}
	elsif ($op eq 'get')
	{
		if ($cmd eq 'date' && $n == 0)
		{
			$result = $comfort->RequestDateTime();
		}
		elsif ($cmd eq 'arm' && $n == 0)
		{
			$result = $comfort->RequestSecurityModeReport();
		}
	}

	if ($cmd ne 'none' && ! defined ($result))
	{
		Print $comfort->GetLastErrorMsg();
	}
}



sub MqttCbusCallback
{
	my ($topic, $value) = @_;
	my ($t1, $op, $app, $group, $cmd) = split (/\//, $topic, 5);
	Print "Received MQTT CBUS msg: $topic = $value: app = $app, group = $group";

	if ($op eq 'set')
	{
		my $level = $value;
		{
			no warnings 'numeric';
			$level += 0;
		}

		my $cbusCmd = $comfort->CBUS_RAMP_OFF;
		if ($app && $group && $cmd)
		{
			$value = uc ($value);
			if ($value eq 'ON' || $value eq 'TRUE')
			{
				$level = $comfort->CBUS_LEVEL_ON;
			}
			elsif ($value eq 'OFF' || $value eq 'FALSE')
			{
				$level = $comfort->CBUS_LEVEL_OFF;
			}


			if ($cmd eq 'switch')
			{
				if ($level > 0)
				{
					$level = $comfort->CBUS_LEVEL_ON;
				}

				if ($level > 0)
				{
					$cbusCmd = $comfort->CBUS_RAMP_ON;
				}
			}
			elsif ($cmd eq 'ramp' || $cmd eq 'level')
			{
				if ($level > 0)
				{
					$cbusCmd = $comfort->CBUS_RAMP_0;
				}

				# If 'ramp' was specified, then we can also specify
				# the ramp period.
				if ($cmd eq 'ramp' && $value =~ /,(\d+)$/)
				{
					if (exists $RAMP_LOOKUP{$1})
					{
						$cbusCmd = $RAMP_LOOKUP{$1};
					}
				}
			}
			else
			{
				return;
			}

			Print "Sending CBUS cmd to group $group, application $app: $level";
			if (! $comfort->SendCbusCommand ($group, $cbusCmd, $level, $app))
			{
				Print $comfort->GetLastErrorMsg();
			}
		}
	}
	elsif ($op eq 'get')
	{
		if (($cmd eq 'level' || $cmd eq 'switch') && $app == $comfort->CBUS_APPLICATION_LIGHTING)
		{
			$comfort->RequestCbusLightingLevel ($group);
		}
	}
	else
	{
		Print "Unknown operation $op";
	}
}



sub IsMqttConnected
{
	# Since MQTT::Simple does not support 'knowing' the connected
	# state, we 'reach into' the object and check for ourselves.
	return ($mqtt->{socket} and $mqtt->{socket}->connected) ? 1 : 0;
}



sub SendMqttMsg
{
	my ($topics, $key, $value, $retain) = @_;

	my $topic = join ('/', @{$topics}, $key);
	Print "Sending MQTT msg: $topic = " . ($value ? $value : '[unset]') . ($retain ? ' (retain)' : '');

	if ($retain)
	{
		$mqtt->retain ($topic => $value);
		$RETAINED{$topic} = $value;
	}
	else
	{
		# If the topic was previously retained, then delete it first
		if (exists $RETAINED{$topic})
		{
			delete $RETAINED{$topic};
			$mqtt->retain ($topic => '');
		}

		$mqtt->publish ($topic => $value);
	}
}



sub SendMqttReportMsg ($$$$)
{
	my ($topics, $reportType, $value, $retain) = @_;
	SendMqttMsg ([ MQTT_COMFORT_PUBLISH_TOPIC, @{$topics} ], $REPORT_TOPIC{$reportType}, $value, $retain);
}



sub SendMqttZIOMsg ($$$$)
{
	my ($topic, $zone, $value, $retain) = @_;
	SendMqttMsg ([ MQTT_COMFORT_PUBLISH_TOPIC, $zone ], $topic, $value, $retain);
}



sub ClearAlarmTypes()
{
	my $count = $comfort->GetMaximumInputs();
	for (my $zone = 1;  $zone <= $count;  ++$zone)
	{
		SendMqttZIOMsg ('alarm_type', $zone, '', 1);
	}
}



sub ComfortLogger
{
	my ($type, $msg) = @_;
	Print (($type == $comfort->LOG_SEND ? 'Sent    ' : 'Received'), ': [', $msg, ']');
}


sub ComfortHandler
{
	Print ("CTHandler: @_");
}


sub ComfortIPHandler
{
	my ($comfort, $type, $zone, $msg) = @_;

	# Retain zones in trouble mode, but not on/off
	my $retain = $msg != $comfort->COMFORT_INPUT_ON && $comfort->COMFORT_INPUT_OFF;

	# Retain specifically configured zones
	if (exists ($RETAIN_INPUT{$zone}))
	{
		$retain = 1;
	}

	SendMqttZIOMsg ($REPORT_TOPIC{$type}, $zone, $INPUT_STATUS{$msg}, $retain);
}


sub ComfortOPHandler
{
	my ($comfort, $type, $output, $msg) = @_;

	$msg = $msg == 0 ? 'OFF' : 'ON';
	my $retain = 0;
	if ($type eq 'OP' && exists ($RETAIN_OUTPUT{$output}))
	{
		$retain = 1;
	}

	SendMqttZIOMsg ($REPORT_TOPIC{$type}, $output, $msg, $retain);
}


sub ComfortCTHandler
{
	my ($comfort, $type, $counter, $msg) = @_;
	if ($counter <= 255)
	{
		my @topics = (MQTT_CBUS_PUBLISH_TOPIC, $comfort->CBUS_APPLICATION_LIGHTING, $counter);

		Print ("CBUS status report: ", join ('/', @topics), " $msg");

		SendMqttMsg (\@topics, 'switch', $msg == 0 ? 'OFF' : 'ON', 1);
		SendMqttMsg (\@topics, 'level',  $msg, 1);
	}

	SendMqttReportMsg ([ $counter ], $type, $msg, 0);
}



sub ComfortDTHandler
{
	my ($comfort, $type, $tm) = @_;

	my $timeDiff = abs (time - $tm);
	if ($timeDiff >= ALLOWED_TIME_DEVIATION)
	{
		Print ("Time scew of $timeDiff seconds detected.  Date/Time will be adjusted.");
		$adjustDateTime = 1;
	}
}


sub ComfortMDHandler
{
	my ($comfort, $type, $armMode, $user) = @_;
	my $armModeName = (grep { $ARM_STATUS{$_} == $armMode } keys %ARM_STATUS)[0];

	SendMqttReportMsg ([], $type, $armModeName . ',' . GetUserName ($user), 0);

	# Report the state to home assistant
	SendMqttMsg ([ MQTT_COMFORT_PUBLISH_TOPIC ], HASS_STATE_TOPIC, $HASS_ARM_STATE{$armMode}, 1);

	# Request an update to all zone states on alarm disarm - we do this mainly
	# to force a reset of all bypassed zones.
	if ($armMode == $comfort->COMFORT_ARM_OFF)
	{
		$comfort->RequestInputReports();
	}
}


sub ComfortAMARHandler
{
	my ($comfort, $type, $alarm, $param) = @_;
	$param //= '';

	my ($alarmName, $triggered, $paramType) = @{$ALARM_TYPE{$alarm}};

	if ($paramType != ALARM_ZONE)
	{
		if ($paramType == ALARM_USER)
		{
			$param = GetUserName ($param);
		}

		SendMqttMsg ([ MQTT_COMFORT_PUBLISH_TOPIC, $REPORT_TOPIC{$type} ], $alarmName, $param, 0);
	}
	else
	{
		# For bypass reports, report the bypass state on the input.
		if ($alarm == $comfort->COMFORT_ALARM_BYPASS)
		{
			SendMqttZIOMsg ($REPORT_TOPIC{'IP'}, $param, 'BYPASS', 1);
		}
	}
}


sub PublishAlarmState
{
	my ($comfort, $type, $alarmState, $alarmType, $param) = @_;
	my $msg = $ALARM_STATE{$alarmState};
	if ($alarmState != $comfort->COMFORT_STATE_IDLE)
	{
		my ($alarmName) = @{$ALARM_TYPE{$alarmType}};
		$msg .= ':' . $alarmName;
		$msg .= ',' . $param if ($param);
	}

	SendMqttMsg ([ MQTT_COMFORT_PUBLISH_TOPIC ], 'state', $msg, 1);
}


sub ComfortALHandler
{
	my ($comfort, $type, $alarmType, $alarmState, $newAlarmState, $sentenceNumber, $paramType, $param) = @_;

	if (exists ($ALARM_TYPE{$alarmType}))
	{
		if ($paramType == $comfort->COMFORT_PARAMETER_ZONE)
		{
			my ($alarmName) = @{$ALARM_TYPE{$alarmType}};

			# Zone zero reports occur for things like arm failure, which
			# is not necessarily zone related.  Report these as if we received
			# an AM report.
			if ($param == 0)
			{
				SendMqttMsg ([ MQTT_COMFORT_PUBLISH_TOPIC, $REPORT_TOPIC{'AM'} ], $alarmName,
					GetUserName ($comfort->COMFORT_USER_NONE), 0);
			}
			# Zone bypasses are set on the input, so don't report them
			# as an alarm.
			elsif ($alarmType != $comfort->COMFORT_ALARM_BYPASS)
			{
				SendMqttZIOMsg ('alarm_type', $param, uc ($alarmName), 1);
			}

			# Report non-idle states on the input
			if (exists ($ALARM_STATE{$newAlarmState}))
			{
				if ($newAlarmState != $comfort->COMFORT_STATE_IDLE)
				{
					SendMqttZIOMsg ($REPORT_TOPIC{'IP'}, $param, $ALARM_STATE{$newAlarmState}, 1);
				}
			}
			else
			{
				Print ("WARNING: ComfortALHandler: Unknown new alarm state: $newAlarmState");
			}
		}

		my $maxAlarmState = $newAlarmState < $alarmState ? $alarmState : $newAlarmState;
		if (exists ($ALARM_STATE{$maxAlarmState}))
		{
			if ($maxAlarmState == $comfort->COMFORT_STATE_IDLE)
			{
				PublishAlarmState ($comfort, $type, $comfort->COMFORT_STATE_IDLE);
			}
			else
			{
				# Request full information about the alarm state
				$comfort->RequestAlarmInformationReport();
			}
		}
		else
		{
			Print ("WARNING: ComfortALHandler: Unknown max alarm state: $maxAlarmState");
		}

		if ($newAlarmState == $comfort->COMFORT_STATE_ALARM)
		{
			# Clear the alarm types
			&ClearAlarmTypes();

			SendMqttMsg ([ MQTT_COMFORT_PUBLISH_TOPIC ], HASS_STATE_TOPIC, HASS_STATE_TRIGGERED, 1);
		}
	}
	else
	{
		Print ("WARNING: ComfortALHandler: Unknown alarm type: $alarmType");
	}
}


sub ComfortAlarmInformationHandler
{
	my ($comfort, $type, $alarmType, $alarmState, $troubleBits, $batteryId, $zone, $rs485Id, $tamperId, $gsmId) = @_;

	Print ("INFO: $type: alarmType: $alarmType, alarmState: $alarmState, troubleBits: $troubleBits, zone: $zone");

	if ($troubleBits & $comfort->COMFORT_TROUBLE_BIT_AC_FAILURE)
	{
		PublishAlarmState ($comfort, $type, $alarmState, $comfort->COMFORT_ALARM_POWER_FAIL);
	}

	if ($troubleBits & $comfort->COMFORT_TROUBLE_BIT_LOW_BATTERY)
	{
		PublishAlarmState ($comfort, $type, $alarmState, $comfort->COMFORT_ALARM_LOW_BATTERY, $batteryId);
	}

	if ($troubleBits & $comfort->COMFORT_TROUBLE_BIT_ZONE)
	{
		PublishAlarmState ($comfort, $type, $alarmState, $comfort->COMFORT_ALARM_ZONE_TROUBLE, $zone);
	}

	if ($troubleBits & $comfort->COMFORT_TROUBLE_BIT_RS485)
	{
		PublishAlarmState ($comfort, $type, $alarmState, $comfort->COMFORT_ALARM_COMMUNICATIONS_FAIL, $rs485Id);
	}

	if ($troubleBits & $comfort->COMFORT_TROUBLE_BIT_TAMPER)
	{
		PublishAlarmState ($comfort, $type, $alarmState, $comfort->COMFORT_ALARM_TAMPER, $tamperId);
	}

	if ($troubleBits & $comfort->COMFORT_TROUBLE_BIT_PHONE)
	{
		PublishAlarmState ($comfort, $type, $alarmState, $comfort->COMFORT_ALARM_PHONE_TROUBLE);
	}

	if ($troubleBits & $comfort->COMFORT_TROUBLE_BIT_GSM)
	{
		PublishAlarmState ($comfort, $type, $alarmState, $comfort->COMFORT_ALARM_GSM_TROUBLE, $gsmId);
	}

	if ($troubleBits == 0)
	{
		PublishAlarmState ($comfort, $type, $comfort->COMFORT_STATE_IDLE);
	}
}


sub ComfortEXHandler
{
	my ($comfort, $type, $entryOrExit, $delay) = @_;

	SendMqttMsg ([ MQTT_COMFORT_PUBLISH_TOPIC ], $ENTRY_EXIT{$entryOrExit}, $delay, 0);

	# Report the state to home assistant
	SendMqttMsg ([ MQTT_COMFORT_PUBLISH_TOPIC ], HASS_STATE_TOPIC, HASS_STATE_PENDING, 1);
}


sub ComfortPSHandler
{
	my ($comfort, $type, $msg) = @_;

	SendMqttReportMsg ([], $type, $msg ? 'ON' : 'OFF', 0);
}


sub ComfortResultHandler
{
	my ($comfort, $type, $msg) = @_;
	$type //= 'unknown';

	if (exists $REPORT_TOPIC{$type})
	{
		$type = $REPORT_TOPIC{$type};
	}

	SendMqttMsg ([ MQTT_COMFORT_PUBLISH_TOPIC, 'raw' ], $type, $msg, 0);
}
